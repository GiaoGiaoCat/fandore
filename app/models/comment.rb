class Comment < ActiveRecord::Base
  # table name
  # extends ...................................................................
  acts_as_commentable
  # NOTE: install the acts_as_votable plugin if you
  # want user to vote on the quality of comments.
  #acts_as_voteable
  # includes ..................................................................
  include ActsAsCommentable::Comment
  # constants .................................................................
  # related macros ............................................................
  # relationships .............................................................
  belongs_to :user
  belongs_to :commentable, :polymorphic => true
  # validations ...............................................................
  validates_uniqueness_of :commentable_id, scope: [:user_id, :commentable_type]
  # callbacks .................................................................
  # scopes ....................................................................
  default_scope -> { order('created_at ASC') }
  scope :for_product, -> { where(commentable_type: 'Order::LineItem') }
  scope :search_by_keyword, ->(keyword) {
    ids = Order::LineItem.ransack(product_name_cont: keyword).result.pluck(:id)
    condition = { commentable_id_in: ids, title_or_comment_cont: keyword }
    ransack(condition.try(:merge, m: 'or')).result
  }
  # other macros (like devise's) ..............................................
  mount_uploaders :pictures, PhotoUploader

  serialize :pictures, JSON
  # class methods .............................................................
  # public instance methods ...................................................
  def replied?
    !comments.empty?
  end
  # protected instance methods ................................................
  # private instance methods ..................................................
end
