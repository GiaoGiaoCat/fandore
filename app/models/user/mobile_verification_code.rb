class User::MobileVerificationCode < User::VerificationCode
  # extends ...................................................................
  # includes ..................................................................
  # constants .................................................................
  # related macros ............................................................
  # relationships .............................................................
  # validations ...............................................................
  PHONE_REGEX = /\A(13[0-9]|15[0-9]|18[0-9]|17[0-9])[0-9]{8}\z/.freeze
  validates :to, format: { with: PHONE_REGEX }
  #  修改正则, 匹配太严格 http://rubular.com/r/D8ZPSfg0Pb
  # callbacks .................................................................
  # scopes ....................................................................
  # other macros (like devise's) ..............................................
  # class methods .............................................................
  # public instance methods ...................................................
  # protected instance methods ................................................
  # private instance methods ..................................................
  private

  def generate_code
    self.code = SecureRandom.random_number.to_s[2, 6]
  end

  def project_code
    case method.to_sym
    when :send_verification
      Figaro.env.message_project_verification
    else
    end
  end

  def send_notification
    pusher = Submail.pusher(Figaro.env.message_app_id, Figaro.env.message_signature)
    pusher.message_xsend(to, project_code, { sms_reg_code: code })
  end
end
